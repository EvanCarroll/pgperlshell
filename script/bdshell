#!/usr/bin/env perl
use feature ':5.10';
use 5.10.0;
use strict;
use warnings;

use bdshell::Backend;
use autodie;
use IO::File;
use Getopt::Long;
use Pod::Usage;

our $VERSION = '0.01';

our $DEBUG;
my ($un, $db, $pw, $help, $command, $file);
my $result = GetOptions(
	'username|U=s'   => \$un
	, 'dbname|d=s'   => \$db
	, 'password|P=s' => \$pw
	, 'command|c=s'  => \$command
	, 'file|f=s'     => \$file
	, 'help|?'       => \$help
	, 'debug'        => \$DEBUG
);
$DEBUG //= $ENV{DEBUG} || 0;
pod2usage(-verbose => 2) if $help;

my $grammar = do {
	use Regexp::Grammars;
	qr{
		(?:
(?:<action=(\\COPY)> <.ws> <table=literal> <.ws> <columns=pcolumns>? <.ws> FROM <.ws> <source> <.ws> (?: (?:WITH)? <.ws> (<[with=with_options]>+ % \s) )? ) |
(?:<action=(\\ECHO)> <.ws> <string=(.+)> ) |
(?:<action=(SET)> <.ws> <effect=(SET|LOCAL)>? <.ws> <key=literal> <.ws> (TO|=) <.ws> (?:<value=pair>|<value=literal>) )
		)

		<rule: with_options>    <format>|<oids>|<delimiter>|<null>|<header>|<quote>|<escape>|<force_quote>|<force_not_null>|<encoding>|<custom_perl>|<custom_tcsv>
		<rule: custom_perl>     -PERL_<key=(\w+)> =? <value=pair>|-PERL_<key=(\w+)>
		<rule: custom_tcsv>     -TCSV_<key=(\w+)> = <value=pair>|-TCSV_<key=(\w+)>

		## These are the most current options made available in 9.1
		<rule: format>          FORMAT <MATCH=literal>
		<rule: oids>            OIDS <MATCH=boolean>
		<rule: delimiter>       DELIMITER <MATCH=pair>
		<rule: null>            NULL <MATCH=pair>
		<rule: header>          HEADER|HEADER <MATCH=boolean>
		<rule: quote>           QUOTE <MATCH=pair>
		<rule: escape>          ESCAPE <MATCH=pair>
		<rule: force_quote>     FORCE QUOTE <MATCH=columns>
		<rule: force_not_null>  FORCE NOT NULL <MATCH=columns>
		<rule: encoding>        ENCODING <MATCH=literal>

		<token: source>         stdin|<MATCH=literal>
		<token: as>             AS

		<rule: columns>         <[MATCH=(\w+)]>+ % ,
		<rule: pcolumns>        \( <MATCH=columns> \)

		<rule: pair>            <_delim=(\$\$|"|')> <MATCH=(.+?(?=(??{quotemeta $MATCH{_delim}})))> (??{ quotemeta $MATCH{_delim} })
		<rule: query>           \( <MATCH=(.+?(?=(??{quotemeta $MATCH{_delim}})))> \)
		<token: literal>        \S+
		<token: boolean>        TRUE|t|true|y|yes|1|FALSE|f|false|no|0
	}xmsi;
};

# Force Quote not yet supported at all.

## Read from file if provided else, read from STDIN
my $io;
if ( not defined $command ) {
	if ( $file ) {
		$io = IO::File->new( $file, '<' );
		say "Reading from file" if $bdshell::DEBUG;
	}
	else {
		IO::Handle->new->fdopen( fileno(STDIN), 'r' );
		say "Falling back to STDIN" if $bdshell::DEBUG;
	}
}

## REPL stuff
while ( my $input = ( $command || defined $io && $io->getline ) ) {
	undef $command;
	next unless $input =~ /\w/;

	say "LINE:\n\t$input" if $bdshell::DEBUG;
	
	$input =~ $grammar;

	my $backend = bdshell::Backend->new({
		_un => $un // $ENV{USER}
		, _pw => $pw
		, _db => $db // $ENV{USER}
	});

	if ( my $action = $/{action} ) {
		my $action = lc $/{action};
		$action =~ s/^\\//;

		## If we have an action delegate to the action
		my $sub = "process_action_$action";
		if ( $backend->can( $sub ) ) {

			{
				no strict 'refs';
				$backend->$sub( \%/, $input );
				#*{"main::$sub"}->( \%/, $input );
			}

			undef %/;
			die 'EOF' if defined $io && $io->eof;

		}
		## Otherwise default it.
		else {
			say "GRAMMAR NOT PRESENT $input" if $DEBUG;
			$backend->_process_default( undef, $input );
		}

	}
	## Can't parse grammar, just forward to DB.
	else {
		say "GRAMMAR NOT PRESENT $input" if $DEBUG;
		$backend->_process_default( undef, $input );
	}

}

__END__

=head1 NAME

BrightDog Shell - a shell for Postgresql

=head1 SYOPSIS

	echo \COPY foo FROM test.txt WITH DELIMITER AS '~' CSV HEADER -PERL_ragged -TCSV_empty_is_undef | \
		bdshell -U username -d database
	;

	bdshell -U username -d database -c "\COPY foo FROM test.txt WITH DELIMITER AS '~' CSV HEADER -PERL_input_order '\3 \2 \1'

=head1 DESCRIPTION

Above and beyond the normal COPY syntax BrightDog adds:

=over 4

=item L<Text::CSV> syntax through B<-TCSV_key> or B<-TCSV_key = value>

Example, B<-TCSV_allow_loose_quotes> which allows "Loose Quotes" is very useful.

=item B<-PERL_key> or B<-PERL_key = value>

This is for special Perl extentions some of which are

=over 4

=item B<-PERL_ragged>

Note this option currently requires you to explicitly list the optional columns in your SQL-COPY command

=item B<-PERL_skip_lines>

Skip lines at the top of the file.

=item B<-PERL_header_lowercase>

Transforms the header of the file to lowercase.

=item B<-PERL_input_order>

B<PERL_input_order>  will permit you to reorder a CSV file. Specify the names of the columns as they apears in the CSV header row. This format requires (a) header row in the input file, (b) ether HEADER or -PERL_header to be enabled.

B<-PERL_input_order> takes two syntaxes:

=over 4

=item Column-backreference

Example: C<\3 \2 \1> for the third column, followed by the second, followed by the first. Note the starting column: \1.

=item Header name syntax

Example: 'colname1,colname2,colname3'

=back

=item B<-PERL_static_column>

This option requires you explicitly name the columns in your COPY statement.

B<-PERL_static_column> takes a JSON hash where the keys are column names, and the values are static values. It inserts these left-to-right. -PERL_static_column="{key:0}" will effectively insert a 0 for the column "key".


=back

=back

=head2 COPY

More information can be found here: http://www.postgresql.org/docs/current/interactive/sql-copy.html

	COPY table_name [ ( column [, ...] ) ]
			FROM { 'filename' | STDIN }
			[ [ WITH ] ( option [, ...] ) ]

	where option can be one of:

			FORMAT format_name
			OIDS [ boolean ]
			DELIMITER 'delimiter_character'
			NULL 'null_string'
			HEADER [ boolean ]
			QUOTE 'quote_character'
			ESCAPE 'escape_character'
			FORCE_QUOTE { ( column [, ...] ) | * }
			FORCE_NOT_NULL ( column [, ...] ) |
			ENCODING 'encoding_name'

=head1 AUTHOR

Evan Carroll <me at evancarroll.com>

http://www.evancarroll.com

=cut

	COPY tablename [ ( column [, ...] ) ]
		FROM { 'filename' | STDIN }
		[ [ WITH ]
				[ BINARY ]
				[ OIDS ]
				[ DELIMITER [ AS ] 'delimiter' ]
				[ NULL [ AS ] 'null string' ]
				[ -PERL_key [ = value ] ]
				[ CSV [ HEADER ]
					[ QUOTE [ AS ] 'quote' ]
					[ ESCAPE [ AS ] 'escape' ]
					[ FORCE NOT NULL column [, ...] ]
					[ -TCSV_key [ = value ] ]

